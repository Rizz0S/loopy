
{
    "testImage" : {
        type: "ImageInputNode",
        file: "phone_screen_360x450",
    },

    "sine1" : {
        type: "SineNode",
        frequency: 0.01,
        waveDiff: 0.7,
        imageKey: "testImage",
    },

    "scale" : {
        type: "ScaleNode",
        x: 1.01,
        y: 0.99,
        centerX: 0.5,
        centerY: 0.5,
        imageInput: "add",
    },

    "rotate" : {
        type: "RotateNode",
        degree: 1,
        centerX: 0.5,
        centerY: 0.5,
        imageInput: "scale",
    },

    "add" : {
        type: "AdditionNode",
        foregroundMultiplier: 0.9999
        foregroundKey: "rotate",
        backgroundKey: "sine",
    },

    output: "add",
}

// This should make the following calls or something equivalent

// cv::Mat image;
// image = cv::imread("phone_screen_360x450.png", CV_LOAD_IMAGE_UNCHANGED);
// LoopyInputNode *testImage = new LoopyInputNode();
//     testImage->setOutput(image);

// SineNode *sine = new SineNode(0.01, .7);
// LinearTransformationNode *scale = LinearTransformationNode::Scale(1.01, .99, image.cols/2, image.rows/2);
// LinearTransformationNode* rotate = LinearTransformationNode::Rotate(1, image.cols/2, image.rows/2);

// AdditionNode *multiply = new AdditionNode(.9999);


// sine->addInput(testImage, sine->imageKey, true);
// scale->addInput(multiply, scale->imageInput, true);
// rotate->addInput(scale, rotate->imageInput, true);

// multiply->addInput(rotate, multiply->foregroundKey, false);
// multiply->addInput(sine, multiply->backgroundKey, true);

// while (true) {
//     testImage->setReady();
//     cv::imshow( "Display window", multiply->getOutput() );
//     cv::waitKey(0);
// }
